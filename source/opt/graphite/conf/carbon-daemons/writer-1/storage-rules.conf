# ##############################
# # What this file is used for #
# ##############################
# This file defines a set of rules for assigning metadata and
# configuration to individal metrics. Changes to this file typically
# don't immediately affect anything. Various tools use this file
# to either apply metadata to metrics stored in the database,
# or to infer what metadata a metric should have if none is found
# in the database.
#
# For instance, the carbon Writer uses this file to apply metadata
# to all newly created metrics. It does not apply any metadata
# to existing metrics. One piece of metadata that used to be managed
# by the old storage-schemas.conf file is the 'retentions' configuration.
# That is now configured through this file but it works the exact same
# way as before. This file allows the configuration of additional metadata
# for arbitrary uses. It is important to note that whisper cannot use
# arbitrary metadata and so if you're using whisper, anything it doesn't
# understand will be silently ignored. If you're using ceres, you can store
# whatever metadata you want.
#
# With the ceres database, some maintenance tasks that were automatic
# in whisper now need to be handled by running a regular maintenance job.
# This includes deleting old data (ceres doesn't use fixed-size files),
# and aggregating high precision data into lower precision storage (ceres
# does not automatically aggregate like whisper did).
#
# The ceres-maintenance program makes it easy to customize the proces
# through its plugin system, for instance there is a plugin for rollup
# aggregation. That plugin asks ceres for 'retentions' metadata and
# if none is found it uses this configuration file to determine what it
# should be, and then updates the metrics' metadata to reflect the correct
# retentions.
# 
# So again, changes to this file may have no immediate impact but over time
# as tools use it, it can take effect on your system. It is likely a ceres-maintenance
# plugin will be written for the sole purpose of propagating metadata defined
# in this file to the ceres database. But as of this writing it does not exist.
#
# Also note that most of the time, what is already stored on the filesystem
# will take precedence over what is defined in this file, hence the need
# to propagate configuration changes made here.
#
# ############################
# # Rule Format and Examples #
# ############################
# Rules looke like this:
#
# [arbitrary-rule-name]
# key = value
# key = value
# ...
#
# Every rule must have exactly one key that defines the condition used
# to determine which metrics the rule applies to. For example, many rules
# use a regular expression match against the metric path by defining
# a 'pattern' key.
#
# [counter-metrics]
# pattern = \.count$
# aggregation-method = sum
#
# Every other key=value pair in the rule *other than the condition key* is
# metadata that applies to all matching metrics. So in this case the only
# metadata is 'aggregation-method'.
#
# Alternatively you can specify a file that lists full metric paths.
# The rule will apply only to metrics listed in the file.
#
# [very-important-metrics]
# list = important-metrics
# retentions = 10s:10y
#
# The list file here would be /opt/graphite/storage/lists/important-metrics
#
# ###################################
# # The Default Rule and Rule Order #
# ###################################
# You can define default metadata by using the 'match-all' condition.
# Since many rules may apply to a single metric, the rules are
# applied in the order they are defined in this file. However, the value set
# by the first matching rule that defines a particular metadata key takes
# precedence over values from all subsequent matching rules that define
# that same key. So your defaults should be the last rule defined.
#
#  [defaults]
#  match-all = true
#  retention = 1m:30d
#  aggregation-method = average
#
# #############
# # Retention #
# #############
# One particularly important metadata key is the 'retentions' key. It
# works like this:
#
# retentions = timePerDatapoint:timeToStore, timePerDatapoint:timeToStore, ...
#
# For example:
#
# retentions = 10s:6h, 1m:1d, 15m:1w, 1h:1y
#
# Means datapoints will be stored at 10 second precision for 6 hours, then
# aggregated (using 'aggregation-method') to 1 minute per datapoint for 1
# day, then 15 minutes per datapoint for a week, and finally 1 hour per
# datapoint for a year.
#
# aggregation-method can be one of
#   average (default)
#   sum
#   last
#   min
#   max
#
# IMPORTANT: All metrics must match at least one rule that defines 'retentions'.
# So you *really should* have a match-all rule defined. Whatever you set as your
# finest precision (10s in the above example) defines the frequency at which
# carbon expects to receive datapoints for these metrics. If you sent two
# datapoints in the same 10s interval, the last one received will take precedent.
# If you sent 2 datapoints in a minute, each 10s interval without a datapoint
# would be null.

[default_1min_for_1day]
match-all = true
retentions = 1m:1d
#
[collectd]
pattern = ^collectd\.
retentions = 10s:1d,1m:30d,5m:1y
# 
[default_match_all]
match-all = true
retentions = 1m:30d,5m:3y
