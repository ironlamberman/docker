# ########################
# # Writer Configuration #
# ########################
# This config file only applies for carbon writers (aka caches), that is
# daemons whose WORKFLOW ends in 'write'.
#
# Limit the size of the cache to avoid swapping or becoming CPU bound.
# Sorts and serving cache queries gets more expensive as the cache grows.
# Use the value "inf" (infinity) for an unlimited cache size.
MAX_CACHE_SIZE = 2000000

# Set this to True to pause receiving metrics when the cache size
# hits MAX_CACHE_SIZE. If this happens, sockets over which metrics are received
# will temporarily stop accepting data until the cache falls below 95%. If this
# is set to False (the default), received points will be dropped when the metric
# cache fills.
USE_FLOW_CONTROL = False

# Limits the number of database write operaitons per second. This is intended to
# prevent over-utilizing the disk and thus starving the rest of the system.
# When the rate of required updates exceeds this, then carbon's caching will
# take effect and increase the overall throughput accordingly.
# (formerly known as MAX_UPDATES_PER_SECOND)
MAX_WRITES_PER_SECOND = 600

# NOTE: Creating new metrics is very cheap for ceres, so when using ceres
# you should set this to a much higher value like 1000.
# Softly limits the number of whisper files that get created each minute.
# Setting this value low (like at 50) is a good way to ensure your graphite
# system will not be adversely impacted when a bunch of new metrics are
# sent to it. The trade off is that it will take much longer for those metrics'
# database files to all get created and thus longer until the data becomes usable.
# Setting this value high (like "inf" for infinity) will cause graphite to create
# the files quickly but at the risk of slowing I/O down considerably for a while.
MAX_CREATES_PER_MINUTE = 50

# By default, carbon will log every write operation (aka "update"). This can be
# excessive and degrade performance if logging on the same volume as the whisper
# data is stored.
LOG_WRITES = True
LOG_CACHE_HITS = False

# All datapoints received by a writer daemon go into a cache which the webapp
# queries to get real-time data. If you have multiple carbon-daemon instances
# it is advised that you use the 'second digit is instance number' port
# numbering scheme described in detail in listeners.conf.
CACHE_QUERY_INTERFACE = 0.0.0.0
CACHE_QUERY_PORT = 7102

# The thread(s) that writes metrics to disk can use on of the following strategies
# determining the order in which metrics are removed from cache and flushed to
# disk. The default option preserves the same behavior as has been historically
# used.
#
# sorted - All metrics in the cache will be counted and an ordered list of
# them will be sorted according to the number of datapoints in the cache at the
# moment of the list's creation. Metrics will then be flushed from the cache to
# disk in that order. This is the default option which provides a balance between
# preferring larger writes and ensuring the metrics on disk are updated with
# regularity
#
# max - The writer thread will always pop and flush the metric from cache
# that has the most datapoints. This will give a strong flush preference to
# frequently updated metrics and will also reduce random file-io. Infrequently
# updated metrics may only ever be persisted to disk at daemon shutdown if
# there are a large number of metrics which receive very frequent updates OR if
# disk i/o is very slow.
#
# naive - Metrics will be flushed from the cache to disk in an unordered
# fashion. This strategy may be desirable in situations where the storage for
# whisper files is solid state, CPU resources are very limited or deference to
# the OS's i/o scheduler is expected to compensate for the semi-random write
# pattern.
#
CACHE_DRAIN_STRATEGY = sorted

# The WHITELISTS_DIR is the directory that is searched for list files
# referenced by storage-rules.conf. For example, if your storage rule
# sets 'list = foo', the file ${WHITELISTS_DIR}/foo is used to
# test the metric's presence.
WHITELISTS_DIR = /opt/graphite/storage/lists
